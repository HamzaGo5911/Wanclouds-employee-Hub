// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddEmployee(params *AddEmployeeParams, opts ...ClientOption) (*AddEmployeeCreated, error)

	AddHome(params *AddHomeParams, opts ...ClientOption) (*AddHomeCreated, error)

	AddOffice(params *AddOfficeParams, opts ...ClientOption) (*AddOfficeCreated, error)

	DeleteEmployee(params *DeleteEmployeeParams, opts ...ClientOption) (*DeleteEmployeeNoContent, error)

	DeleteHome(params *DeleteHomeParams, opts ...ClientOption) (*DeleteHomeNoContent, error)

	DeleteOffice(params *DeleteOfficeParams, opts ...ClientOption) (*DeleteOfficeNoContent, error)

	GetEmployee(params *GetEmployeeParams, opts ...ClientOption) (*GetEmployeeOK, error)

	GetHome(params *GetHomeParams, opts ...ClientOption) (*GetHomeOK, error)

	GetOffice(params *GetOfficeParams, opts ...ClientOption) (*GetOfficeOK, error)

	ListEmployees(params *ListEmployeesParams, opts ...ClientOption) (*ListEmployeesOK, *ListEmployeesNoContent, error)

	ListHomes(params *ListHomesParams, opts ...ClientOption) (*ListHomesOK, *ListHomesNoContent, error)

	ListOffices(params *ListOfficesParams, opts ...ClientOption) (*ListOfficesOK, *ListOfficesNoContent, error)

	UpdateEmployee(params *UpdateEmployeeParams, opts ...ClientOption) (*UpdateEmployeeOK, error)

	UpdateHome(params *UpdateHomeParams, opts ...ClientOption) (*UpdateHomeOK, error)

	UpdateOffice(params *UpdateOfficeParams, opts ...ClientOption) (*UpdateOfficeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddEmployee add employee API
*/
func (a *Client) AddEmployee(params *AddEmployeeParams, opts ...ClientOption) (*AddEmployeeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddEmployeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addEmployee",
		Method:             "POST",
		PathPattern:        "/employee",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddEmployeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddEmployeeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addEmployee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddHome add home API
*/
func (a *Client) AddHome(params *AddHomeParams, opts ...ClientOption) (*AddHomeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddHomeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addHome",
		Method:             "POST",
		PathPattern:        "/home",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddHomeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddHomeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addHome: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddOffice add office API
*/
func (a *Client) AddOffice(params *AddOfficeParams, opts ...ClientOption) (*AddOfficeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddOfficeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addOffice",
		Method:             "POST",
		PathPattern:        "/office",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddOfficeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddOfficeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addOffice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteEmployee delete employee API
*/
func (a *Client) DeleteEmployee(params *DeleteEmployeeParams, opts ...ClientOption) (*DeleteEmployeeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEmployeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteEmployee",
		Method:             "DELETE",
		PathPattern:        "/employee/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteEmployeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteEmployeeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteEmployee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteHome delete home API
*/
func (a *Client) DeleteHome(params *DeleteHomeParams, opts ...ClientOption) (*DeleteHomeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHomeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteHome",
		Method:             "DELETE",
		PathPattern:        "/home/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteHomeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHomeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteHome: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteOffice delete office API
*/
func (a *Client) DeleteOffice(params *DeleteOfficeParams, opts ...ClientOption) (*DeleteOfficeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOfficeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteOffice",
		Method:             "DELETE",
		PathPattern:        "/office/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteOfficeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteOfficeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteOffice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEmployee get employee API
*/
func (a *Client) GetEmployee(params *GetEmployeeParams, opts ...ClientOption) (*GetEmployeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEmployeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEmployee",
		Method:             "GET",
		PathPattern:        "/employee/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEmployeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEmployeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEmployee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHome Return home based on ID
*/
func (a *Client) GetHome(params *GetHomeParams, opts ...ClientOption) (*GetHomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHomeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getHome",
		Method:             "GET",
		PathPattern:        "/home/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHomeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHomeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getHome: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetOffice Return office based on UUID
*/
func (a *Client) GetOffice(params *GetOfficeParams, opts ...ClientOption) (*GetOfficeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOfficeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOffice",
		Method:             "GET",
		PathPattern:        "/office/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOfficeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOfficeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOffice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListEmployees Return a list of employees
*/
func (a *Client) ListEmployees(params *ListEmployeesParams, opts ...ClientOption) (*ListEmployeesOK, *ListEmployeesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEmployeesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listEmployees",
		Method:             "GET",
		PathPattern:        "/employee",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListEmployeesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListEmployeesOK:
		return value, nil, nil
	case *ListEmployeesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListHomes Return a list of homes
*/
func (a *Client) ListHomes(params *ListHomesParams, opts ...ClientOption) (*ListHomesOK, *ListHomesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHomesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listHomes",
		Method:             "GET",
		PathPattern:        "/home",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListHomesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListHomesOK:
		return value, nil, nil
	case *ListHomesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListOffices Return a list of offices
*/
func (a *Client) ListOffices(params *ListOfficesParams, opts ...ClientOption) (*ListOfficesOK, *ListOfficesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListOfficesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listOffices",
		Method:             "GET",
		PathPattern:        "/office",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListOfficesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListOfficesOK:
		return value, nil, nil
	case *ListOfficesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateEmployee update employee API
*/
func (a *Client) UpdateEmployee(params *UpdateEmployeeParams, opts ...ClientOption) (*UpdateEmployeeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEmployeeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateEmployee",
		Method:             "PATCH",
		PathPattern:        "/employee/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateEmployeeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateEmployeeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateEmployee: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateHome update home API
*/
func (a *Client) UpdateHome(params *UpdateHomeParams, opts ...ClientOption) (*UpdateHomeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHomeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateHome",
		Method:             "PATCH",
		PathPattern:        "/home/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateHomeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateHomeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateHome: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateOffice update office API
*/
func (a *Client) UpdateOffice(params *UpdateOfficeParams, opts ...ClientOption) (*UpdateOfficeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateOfficeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateOffice",
		Method:             "PATCH",
		PathPattern:        "/office/{ID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateOfficeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateOfficeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateOffice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
